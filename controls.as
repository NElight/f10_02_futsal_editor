package{		import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		import org.FlepStudio.ToolTip;		import src.popup.PopupBtnItemClone;	import src.popup.PopupBtnItemColor;	import src.popup.PopupBtnItemPin;		import src3d.ButtonSettings;	import src3d.SSPEvent;	import src3d.SSPEventDispatcher;	import src3d.SessionGlobals;	import src3d.models.soccer.pitches.PitchLibrary;	import src3d.utils.EventHandler;		public class controls	{		private var _ref;		private var _stage:Stage;		private var _popupMode:Boolean;				public var _controls:MovieClip;				private var arrow_pos:Number 		= 0;		private var arrow_pos_states:Array 	= [];				private var cam_lock:Number			= 2;				private var item_size:Number		= 0;		private var pitch_style:Number		= 1;		private var item_elevation:Number	= 0;						private var cam_psition:String = "cam_centre";		private var btnSettingsVector:Vector.<ButtonSettings> = new Vector.<ButtonSettings>; // Selected 3D object's settings.				private var tool_tip:ToolTip;		private var sG:SessionGlobals = SessionGlobals.getInstance();		private var sspEventDispatcher:SSPEventDispatcher = SSPEventDispatcher.getInstance();		private var sspEventHandler:EventHandler = new EventHandler(SSPEventDispatcher.getInstance());				public function controls(ref:main, popupMode:Boolean = false) {				_ref = ref;			_stage = _ref.stage;			_popupMode = popupMode;						initControls();			init2DControlsListeners();			init3DControlsListeners();			initExternalEventsListeners();		}				private function initControls():void {			_controls = new mc_controls();			_controls.x 			= 901;			_controls.y 			= 458;			_ref._mainContainer.addChild(_controls);		}				private function init2DControlsListeners():void {			_controls.ctrl_zoom_in.zibutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_zoom_in.zibutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_zoom_out.zobutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_zoom_out.zobutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_camera_right.ccrbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_camera_right.ccrbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_camera_left.cclbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_camera_left.cclbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_camera_up.ccubutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_camera_up.ccubutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_camera_down.ccdbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_camera_down.ccdbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_pitch_style.psbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_pitch_style.psbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_camera_position.btnPopup.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_camera_position.btnPopup.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_item_size.isbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_item_size.isbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_cam_lock.lock_icon.gotoAndStop(cam_lock);			_controls.ctrl_cam_lock.cclkbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_cam_lock.cclkbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_mirror.mbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_mirror.mbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_rotate_ccw.crcbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_rotate_ccw.crcbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_rotate_cw.crccbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_rotate_cw.crccbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						_controls.ctrl_delete.cdbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_delete.cdbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Line Arrowhead position.			_controls.ctrl_arrow_pos.visible = false;			_controls.ctrl_arrow_pos.csrbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_arrow_pos.csrbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Player Kit			_controls.ctrl_custom_player.pcbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_custom_player.pcbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Equipment Color			_controls.ctrl_custom_equipment_color.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_custom_equipment_color.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Item Elevation			_controls.ctrl_custom_item_elevation.btn_custom_item_elevation.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_custom_item_elevation.btn_custom_item_elevation.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Item Resize			_controls.ctrl_custom_item_size.btn_custom_item_size.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_custom_item_size.btn_custom_item_size.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Item Clone			_controls.ctrl_item_clone.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_item_clone.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Item Pin			_controls.ctrl_item_pin.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_item_pin.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);						// Custom Item Transparency			_controls.ctrl_custom_item_transparency.btnButton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_controls.ctrl_custom_item_transparency.btnButton.addEventListener(MouseEvent.MOUSE_OUT,button_out);		}				private function init3DControlsListeners():void {			// MAIN			_ref._clearpitch.clear_all_button.addEventListener(MouseEvent.CLICK, controls_btn_click);						// PITCH VIEWS			_ref._pitchSlider._pitchSlider.pitch_container.addEventListener(MouseEvent.CLICK, changePitchView);						// KEYS			_ref.stage.addEventListener(KeyboardEvent.KEY_DOWN, key_down);			_ref.stage.addEventListener(KeyboardEvent.KEY_UP, key_up);						// 3D CONTROLS			_controls.ctrl_zoom_in.zibutton.addEventListener(MouseEvent.MOUSE_DOWN,controls_btn_down);			_controls.ctrl_zoom_out.zobutton.addEventListener(MouseEvent.MOUSE_DOWN,controls_btn_down);			_controls.ctrl_camera_right.ccrbutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);			_controls.ctrl_camera_left.cclbutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);			_controls.ctrl_camera_up.ccubutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);			_controls.ctrl_camera_down.ccdbutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);			_controls.ctrl_rotate_ccw.crcbutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);			_controls.ctrl_rotate_cw.crccbutton.addEventListener(MouseEvent.MOUSE_DOWN, controls_btn_down);						_controls.ctrl_pitch_style.psbutton.addEventListener(MouseEvent.CLICK,toggle_pitch_style);			_controls.ctrl_item_size.isbutton.addEventListener(MouseEvent.CLICK,toggle_item_size);			_controls.ctrl_cam_lock.cclkbutton.addEventListener(MouseEvent.CLICK,toggle_screen_lock);			_controls.ctrl_mirror.mbutton.addEventListener(MouseEvent.CLICK, controls_btn_click);			_controls.ctrl_delete.cdbutton.addEventListener(MouseEvent.CLICK, controls_btn_click);						_controls.ctrl_arrow_pos.csrbutton.addEventListener(MouseEvent.CLICK,arrow_chooser);			_controls.ctrl_custom_player.addEventListener(MouseEvent.CLICK, showCustomKit);		}				private function controls_btn_down(event:MouseEvent):void {			var btnName:String = event.currentTarget.name;			//trace("controls_btn_down - "+btnName);			switch(btnName) {				case "zibutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_ZOOM_IN,true));					break;				case "zobutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_ZOOM_OUT,true));					break;				case "cclbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_CAMERA_LEFT,true));					break;				case "ccrbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_CAMERA_RIGHT,true));					break;				case "ccubutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_CAMERA_UP,true));					break;				case "ccdbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_CAMERA_DOWN,true));					break;				case "cldbutton":					// 2D Line Draw.					break;				case "crccbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_ROTATE,true)); // TODO: Fix simple button instance name.					break;				case "crcbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_DOWN_ROTATE,false)); // TODO: Fix simple button instance name.					break;				case "cmbutton":					// Move Button.					break;			}		}				private function controls_btn_click(event:MouseEvent):void {			var btnName:String = event.currentTarget.name;			//trace("controls_btn_click - "+btnName);			switch(btnName) {				case "pcbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_PLAYER_CUSTOMIZE));					break;				case "cdbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_DELETE));					break;				case "mbutton":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_FLIP_H));					break;				case "save_button":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SESSION_SAVE));					break;				case "clear_all_button":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SESSION_CLEAR_ALL));					break;				case "save_to_pc_button":					sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SESSION_SAVE_TO_PC));					break;			}		}				public function updateControls(screenIdx:int):void {			var strScreenId:String = String(screenIdx);			var sS:XMLList = sG.sessionDataXML.session.screen.(_screenId == strScreenId);			if(sS.length() > 0) {				item_size	= int(sS._globalObjScale.text());				pitch_style	= int(sS._pitchFloorId.text());			}			_controls.ctrl_pitch_style.ps_icon.gotoAndStop(pitch_style);			_controls.ctrl_item_size.is_icon.gotoAndStop(item_size+1);			cam_lock = 2;			_controls.ctrl_cam_lock.lock_icon.gotoAndStop(cam_lock);			//_controls.ctrl_camera_position.updateControls();		}				private function button_hover(event:MouseEvent):void {			var tip_button:MovieClip = event.target.parent as MovieClip;			//var countchildren = tip_button.parent.numChildren;			if (tip_button.name != "ctrl_item_clone" &&				tip_button.name != "ctrl_item_pin" &&				tip_button.name != "ctrl_custom_item_transparency") {				tip_button.gotoAndStop(2); // If button is not pin or clone, go to mouse over mode.			}						switch (tip_button.name) {				case "ctrl_zoom_in":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnZoomIn.text());					break;				case "ctrl_zoom_out":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnZoomOut.text());					break;				case "ctrl_camera_right":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCameraRight.text());					break;				case "ctrl_camera_left":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCameraLeft.text());					break;				case "ctrl_camera_up":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCameraUp.text());					break;				case "ctrl_camera_down":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCameraDown.text());					break;				case "ctrl_pitch_style":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnPitchStyle.text());					break;				case "ctrl_camera_position":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCameraView.text());					break;				case "ctrl_item_size":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnObjectScale.text());					break;				case "ctrl_cam_lock":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnLockOn.text());					break;				//case "ctrl_angle":				//	tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnAngle.text());				//	break;				case "ctrl_arrow_pos":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnArrowHeadPosition.text());					break;				case "ctrl_mirror":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnFlipPlayer.text());					break;				case "ctrl_rotate_cw":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnRotateRight.text());					break;				case "ctrl_rotate_ccw":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnRotateLeft.text());					break;				case "ctrl_custom_player":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCustomPlayer.text());					break;				//case "ctrl_move":				//	tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnSelect.text());				//x	break;				case "ctrl_delete":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnPitchViewDelete.text());					break;				case "ctrl_custom_equipment_color":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnChangeColour.text());					break;				case "btn_custom_item_elevation":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnObjectElevation.text());					break;				case "btn_custom_item_size":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnObjectSize.text());					break;				case "ctrl_item_pin":					if (_controls.ctrl_item_pin.buttonSelected) {						tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnTurnOffPinToCursor.text());					} else {						tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnPinToCursor.text());					}					break;				case "ctrl_item_clone":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags[0]._btnCloneObject.text());					break;				case "ctrl_custom_item_transparency":					tool_tip=new ToolTip(0xFFCC00,0x000000,12,"_sans",sG.interfaceLanguageDataXML.tags._btnObjectTransparency.text());					break;			}			if (tool_tip != null) _ref._mainContainer.addChild(tool_tip);			//tip_button.setChildIndex(tool_tip,(countchildren));		}				private function button_out(event:MouseEvent):void {			var btn:MovieClip = event.target.parent as MovieClip;			if (btn.name != "ctrl_item_clone" &&				btn.name != "ctrl_item_pin" &&				btn.name != "ctrl_custom_item_transparency") {				btn.gotoAndStop(1);			}			if(tool_tip!=null) {				tool_tip.destroy();				tool_tip=null;			}		}				private function toggle_pitch_style(event:MouseEvent):void {			pitch_style = (pitch_style + 1 >= PitchLibrary.getInstance().aPF.length)? 1 : pitch_style + 1;			_controls.ctrl_pitch_style.ps_icon.gotoAndStop(pitch_style);			// Dispatch event to 3D.			trace("Pitch Style: " + pitch_style);			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_PITCH_TEXTURE_CHANGE,Number(pitch_style)));		}				private function choose_arrow_pos(event:MouseEvent):void {			var arrow_pos_obj = event.target;			var arrow_pos_array:Array = arrow_pos_obj.name.split("_");			arrow_pos = arrow_pos_array[arrow_pos_array.length-1];			arrow_chooser(event);			//Send arrow_pos			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.LINE_UPDATE_SINGLE_LINE,Number(arrow_pos)));		}				private function arrow_chooser(event:MouseEvent):void { 			set_arrow();		}				private function set_arrow() {			if(_controls.arrow_select.visible == true) {				var x:int;				var pos:String;				_stage.removeEventListener(MouseEvent.MOUSE_DOWN, hide_arrow_chooser);				_controls.arrow_select.visible = false;				for(x = 0; x < 4; x++) {					pos = "arrowpos_" + x;					_controls.arrow_select[pos].removeEventListener(MouseEvent.CLICK,choose_arrow_pos);					if(arrow_pos_states[x] != null) {						_controls.arrow_select[pos].upState = arrow_pos_states[x];					}				}			} else {				_stage.addEventListener(MouseEvent.MOUSE_DOWN, hide_arrow_chooser);				for(x = 0; x < 4; x++) {					pos = "arrowpos_" + x;					_controls.arrow_select[pos].addEventListener(MouseEvent.CLICK,choose_arrow_pos);					if(arrow_pos == x) {						arrow_pos_states[x] = _controls.arrow_select[pos].upState;						_controls.arrow_select[pos].upState = _controls.arrow_select[pos].overState;					} else {						if(arrow_pos_states[x] != null) {							_controls.arrow_select[pos].upState = arrow_pos_states[x];						}					}				}				_controls.arrow_select.visible = true;			}		}				private function hide_arrow_chooser(event:MouseEvent):void {			if(event.target.parent.name != "arrow_select" && event.target.name != "arrow_select") {				set_arrow();			}		}				private function toggle_item_size(event:MouseEvent):void {			switch(item_size) {				case 0:					item_size = 1;					_controls.ctrl_item_size.is_icon.gotoAndStop(item_size+1);					break;				case 1:					item_size = 2;					_controls.ctrl_item_size.is_icon.gotoAndStop(item_size+1);					break;				case 2:					item_size = 3;					_controls.ctrl_item_size.is_icon.gotoAndStop(item_size+1);					break;				case 3:					item_size = 0;					_controls.ctrl_item_size.is_icon.gotoAndStop(item_size+1);					break;					}			// Dispatch event to 3D.			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SCALE_CHANGE,Number(item_size)));		}				private function toggle_screen_lock(event:MouseEvent):void {			if(cam_lock == 2) {				cam_lock = 1;				_controls.ctrl_cam_lock.lock_icon.gotoAndStop(cam_lock);				sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SCREEN_LOCK,true));			} else {				cam_lock = 2;				_controls.ctrl_cam_lock.lock_icon.gotoAndStop(cam_lock);				sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_SCREEN_LOCK,false));			}		}				private function showCustomKit(event:MouseEvent):void {			// Get the settings from the btnSettingsVector var that has been set in button_visible();			var btnSettings:ButtonSettings = getButtonSettings(ButtonSettings.CTRL_CUSTOM_PLAYER_KIT);			if (!btnSettings) return;			if (btnSettings.btnVisible) {				// btnData contains the current player's custom kit.				_ref._menu._kits.openCustomKit(btnSettings.btnData);			} else {				// Maybe back to action kits?			}		}				private function changePitchView(event:MouseEvent):void {			var btnName:String = event.target.name;			//trace("changePitchView - "+btnName);			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.CONTROL_CLICK_PITCH_VIEW_CHANGE, btnName));		}				private function initExternalEventsListeners():void {			SSPEventDispatcher.getInstance().addEventListener(SSPEvent.CONTROL_VISIBLE, button_visible);		}		private function button_visible(e:SSPEvent):void {			// eventData contains a Vector.<ButtonSettings>. Some objects can enable more than one button (eg: color and elevation).			btnSettingsVector = e.eventData as Vector.<ButtonSettings>;			for each(var btnSettings:ButtonSettings in btnSettingsVector) {				//trace("Button "+btnSettings.btnName+" visible: "+btnSettings.btnVisible);				switch(btnSettings.btnName) {					case ButtonSettings.CTRL_CUSTOM_ARROWHEAD_POS:						// From DynamicLine.as - selected().						if (btnSettings.btnData) arrow_pos = btnSettings.btnData.arrowPos;						_controls.ctrl_arrow_pos.visible = btnSettings.btnVisible;						break;					case ButtonSettings.CTRL_CUSTOM_PLAYER_KIT:						// From SessionView - selectObject().						_controls.ctrl_custom_player.visible = btnSettings.btnVisible;						break;					case ButtonSettings.CTRL_CUSTOM_EQUIP_COLOR:						// From SessionView - selectObject().						PopupBtnItemColor(_controls.ctrl_custom_equipment_color).buttonEnabled = btnSettings.btnVisible;						if (btnSettings.btnVisible && btnSettings.btnData) _controls.ctrl_custom_equipment_color.setItem(btnSettings.btnData);						break;					case ButtonSettings.CTRL_CUSTOM_ITEM_ELEVATION:						// From SessionView - selectObject().						_controls.ctrl_custom_item_elevation.buttonEnabled = btnSettings.btnVisible;						if (btnSettings.btnVisible && btnSettings.btnData) _controls.ctrl_custom_item_elevation.setItem(btnSettings.btnData);						break;					case ButtonSettings.CTRL_CUSTOM_ITEM_SIZE:						// From SessionView - selectObject().						_controls.ctrl_custom_item_size.buttonEnabled = btnSettings.btnVisible;						if (btnSettings.btnVisible && btnSettings.btnData) _controls.ctrl_custom_item_size.setItem(btnSettings.btnData);						break;					case ButtonSettings.CTRL_CUSTOM_ITEM_CLONE:						// From SessionView - selectObject().						PopupBtnItemClone(_controls.ctrl_item_clone).buttonEnabled = btnSettings.btnVisible;						//_controls.ctrl_item_clone.buttonSelected = btnSettings.btnSelected;						break;					case ButtonSettings.CTRL_CUSTOM_ITEM_PIN:						// From SessionView - selectObject().						PopupBtnItemPin(_controls.ctrl_item_pin).buttonEnabled = btnSettings.btnVisible;						_controls.ctrl_item_pin.buttonSelected = btnSettings.btnSelected;						break;					case ButtonSettings.CTRL_CUSTOM_ITEM_TRANSPARENCY:						/* Button Disabled. Moved transparency control to the Equipment color box.						// From SessionView - selectObject().						PopupBtnItemTransparency(_controls.ctrl_custom_item_transparency).buttonEnabled = btnSettings.btnVisible;						//_controls.ctrl_custom_item_transparency.buttonSelected = btnSettings.btnSelected;						if (btnSettings.btnVisible && btnSettings.btnData) _controls.ctrl_custom_item_transparency.setItem(btnSettings.btnData);						*/						break;					case ButtonSettings.CTRL_CAMERA_POSITION:						// From SessionView - selectObject().						_controls.ctrl_camera_position.buttonEnabled = btnSettings.btnVisible;						if (btnSettings.btnVisible && btnSettings.btnData) _controls.ctrl_camera_position.updateButton(btnSettings.btnData);						break;				}			}		}				// Get the specified button settings from the vector.		private function getButtonSettings(btnName:String):ButtonSettings {			if (!btnSettingsVector) return null;			for each(var btnSettings:ButtonSettings in btnSettingsVector) {				if (btnSettings.btnName == btnName) return btnSettings;			}			return null;		}				private function key_down(event:KeyboardEvent):void {			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.KEY_DOWN, event));		}		private function key_up(event:KeyboardEvent):void {			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.KEY_UP, event));		}	}}