package{		import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.text.*;		import src.StageManager;	import src.controls.tooltip.SSPToolTip;	import src.controls.tooltip.SSPToolTipSettings;	import src.header.Score;		import src3d.SSPEvent;	import src3d.SSPEventDispatcher;	import src3d.SessionGlobals;	import src3d.SessionView;
		public class header	{		private var sG:SessionGlobals = SessionGlobals.getInstance();		private var sspEventDispatcher:SSPEventDispatcher = SSPEventDispatcher.getInstance();				//private var firstName:String;		//private var lastName:String;		private var _header:MovieClip;		private var _score:Score;		private var hq_status:Number = 2;		private var pv_status:Number = 1;		private var _ref:main;		private var sessionViewerHolder:SessionView;		private var screensProperties:Object = new Object;		private var _stage:Stage;		private var txtSessionTitleEdit:TextField;		private var drawing:Boolean = false;				private var oldScreenIndex:Number;				public function header(ref:main, stage:Stage) {				_ref = ref;			_stage = stage;						_header = new mc_header();			_header.x 			= 1;			_header.y 			= 1;			_ref._headerContainer.addChild(_header);						_header.pitchsize_btn.view.gotoAndStop(pv_status);			_header.pitchsize_btn.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_header.pitchsize_btn.addEventListener(MouseEvent.MOUSE_OUT,button_out);			_header.pitchsize_btn.addEventListener(MouseEvent.CLICK,toggle_view);						this.updateStageSizeButton();			_header.screensize_btn.ssbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_header.screensize_btn.ssbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);			_header.screensize_btn.ssbutton.addEventListener(MouseEvent.CLICK,onToggleStageSize);						_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);			_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_DOWN,show_pad);			_header.scribble_btn.visible = false;						_header.print_btn.button.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_header.print_btn.button.addEventListener(MouseEvent.MOUSE_OUT,button_out);			_header.print_btn.button.addEventListener(MouseEvent.CLICK,start_printing);						_header.settings_btn.button.addEventListener(MouseEvent.MOUSE_OVER,button_hover);			_header.settings_btn.button.addEventListener(MouseEvent.MOUSE_OUT,button_out);			_header.settings_btn.button.addEventListener(MouseEvent.CLICK,toggle_settings);						_header.button.doubleClickEnabled = true;			_header.button.addEventListener(MouseEvent.DOUBLE_CLICK,make_header_editable);						var strSessionTitle:String;			if(sG.sessionDataXML.session[0]._sessionTitle.text().toString() == "") {				strSessionTitle = sG.interfaceLanguageDataXML.titles[0]._titleBarDefault.text();			} else {				strSessionTitle = sG.sessionDataXML.session[0]._sessionTitle.text();			}						_header.header_title.htmlText = strSessionTitle;			if (sG.sessionType == SessionGlobals.SESSION_TYPE_MATCH) {				_header.header_label.text = sG.interfaceLanguageDataXML.titles[0]._titleMatchTitle.text();			} else {				_header.header_label.text = sG.interfaceLanguageDataXML.titles[0]._titleSession.text()+":";			}						// Score.			_score = _header.score_btn;			_score.scoreEnabled = (sG.sessionType == SessionGlobals.SESSION_TYPE_MATCH)? true : false;			_score.scoreLabel = sG.interfaceLanguageDataXML.titles._titleScore.text();						// Stage Resize.			sspEventDispatcher.addEventListener(SSPEvent.STAGE_RESIZE, onStageResizeHandler);						initToolTips();		}				private function initToolTips():void {			// Tooltips.			var vSettings:Vector.<SSPToolTipSettings> = new Vector.<SSPToolTipSettings>();			vSettings.push(new SSPToolTipSettings(_header.pitchsize_btn, sG.interfaceLanguageDataXML.tags._btn_showTools.text()));			vSettings.push(new SSPToolTipSettings(_header.screensize_btn, sG.interfaceLanguageDataXML.tags._btnFullScreen.text()));			vSettings.push(new SSPToolTipSettings(_header.scribble_btn, sG.interfaceLanguageDataXML.tags._btnScribble.text()));			vSettings.push(new SSPToolTipSettings(_header.print_btn, sG.interfaceLanguageDataXML.tags._btnPrint.text()));			if (sG.sessionType == SessionGlobals.SESSION_TYPE_MATCH) {				vSettings.push(new SSPToolTipSettings(_header.settings_btn, sG.interfaceLanguageDataXML.tags._btnMatchSettings.text()));			} else {				vSettings.push(new SSPToolTipSettings(_header.settings_btn, sG.interfaceLanguageDataXML.tags._btnSessionSettings.text()));			}			SSPToolTip.getInstance().addToolTips(vSettings);		}		private function button_hover(event:MouseEvent):void {			event.target.parent.gotoAndStop(2);									var header_button = event.target.parent;			header_button.gotoAndStop(2);		}		private function button_out(event:MouseEvent):void {			event.target.parent.gotoAndStop(1);		}		private function toggle_quality(event:MouseEvent):void {			if(hq_status == 2) {				hq_status = 1;				_header.quality_btn.light.gotoAndStop(hq_status);			} else {				hq_status = 2;				_header.quality_btn.light.gotoAndStop(hq_status);			}					}				private function toggle_view(event:MouseEvent):void {			var scribblePad:MovieClip = _ref._padContainer.getChildByName("ssp_pad") as MovieClip;			if(drawing) {				drawing = false;				_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);				_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);				_header.scribble_btn.gotoAndStop(1);				_ref._pad.clearDrawing();			}						if(pv_status == 1) {				//_ref._screen_holder.getChildByName("settings_form").visible = false;								// Get the active 3d session viewer holder.				//sessionViewerHolder = _ref._screens.sessionScreens[_ref._screens.currentTab];				sessionViewerHolder = main.sessionView;				// Stores the width and height of the active 3d session viewer holder.				screensProperties.width = _ref._screen_holder.width;				screensProperties.height = _ref._screen_holder.height;				// Stores the x and y of ref._screen_holder.				screensProperties.x = _ref._screen_holder.x;				screensProperties.y = _ref._screen_holder.y;								pv_status = 2;				_header.pitchsize_btn.view.gotoAndStop(pv_status);								_header.scribble_btn.visible = true;				if(scribblePad && drawing) {					scribblePad.width = 1000;					scribblePad.height = 585;					if (_ref.stage.height - _ref._headerContainer.height < 585) {						scribblePad.height = _ref.stage.height - _ref._headerContainer.height;					}				}								_score.x = _header.scribble_btn.x -1;								/*sessionViewerHolder.width = 1000;				sessionViewerHolder.height = 585;				sessionViewerHolder.x = 0;				sessionViewerHolder.y = 35;*/				_ref._screen_holder.x = 0;				_ref._screen_holder.y = 35;				_ref._screen_holder.parent.setChildIndex(_ref._screen_holder, _ref._screen_holder.parent.numChildren-1);								// Hides the 2D main area				_ref._mainContainer.visible = false;								// Change 3D view.				main.sessionView.resizeView(pv_status);								// Show Control Bar.				_ref.popupToolbar.toolbarEnabled = true;				_ref.updateToolbars();								_ref.bringPopupToolbarContainerToFront();				//if(scribblePad) _ref.bringPadContainerToFront();				_ref.bringHeaderToFront();							} else {				// Hide Control Bar.				_ref.popupToolbar.toolbarEnabled = false;				_ref.updateToolbars();								//_ref._screen_holder.getChildByName("settings_form").visible = true;				pv_status = 1;								if(scribblePad && drawing) {					scribblePad.width = screensProperties.width;					scribblePad.height = screensProperties.height;									}				_header.scribble_btn.visible = false;				_score.x = _header.settings_btn.x -1;				/*sessionViewerHolder.width = screensProperties.width;				sessionViewerHolder.height = screensProperties.height;				sessionViewerHolder.x = screensProperties.x;				sessionViewerHolder.y = screensProperties.y;*/				_ref._screen_holder.x = screensProperties.x;				_ref._screen_holder.y = screensProperties.y;				_ref._screen_holder.parent.setChildIndex(_ref._screen_holder, 1);				_header.pitchsize_btn.view.gotoAndStop(pv_status);								// Shows the 2D main area.				_ref._mainContainer.visible = true;								// Change 3D view.				main.sessionView.resizeView(pv_status);								_ref.bringMainContainerToFront();				//if(scribblePad) _ref.bringPadContainerToFront();				_ref.bringHeaderToFront();			}					}				// ----------------------------- Full Screen ----------------------------- //		private function onToggleStageSize(e:MouseEvent):void {			StageManager.getInstance().toggleStageSize();		}				private function onStageResizeHandler(e:SSPEvent):void {			trace("header.onStageResizeHandler(). displayState: " + e.eventData);			updateStageSizeButton(e.eventData);		}				private function updateStageSizeButton(displayState:String = ""):void {			if (!displayState || displayState == "") displayState = _stage.displayState;			if (displayState == StageDisplayState.NORMAL) {				_header.screensize_btn.screensize.gotoAndStop(1);			} else {				_header.screensize_btn.screensize.gotoAndStop(2);			}		}		// -------------------------- End of Full Screen ------------------------- //								private function start_printing(event:MouseEvent):void {			sspEventDispatcher.dispatchEvent(new SSPEvent(SSPEvent.PRINT_HIGH_RES));		}				private function toggle_settings(event:MouseEvent):void {			_ref.settingsForm.popupVisible = (!_ref.settingsForm.popupVisible)? true : false;		}				private function make_header_editable(event:MouseEvent):void{			sG.textEditing = true;			txtSessionTitleEdit						= new TextField();			txtSessionTitleEdit.defaultTextFormat	= getFormat();			txtSessionTitleEdit.type 				= TextFieldType.INPUT;			txtSessionTitleEdit.htmlText				= _header.header_title.htmlText;			txtSessionTitleEdit.border 				= false;			txtSessionTitleEdit.x 					= _header.header_title.x;			txtSessionTitleEdit.y 					= _header.header_title.y;			txtSessionTitleEdit.multiline 			= false;			txtSessionTitleEdit.wordWrap 			= false;			txtSessionTitleEdit.background			= true;			txtSessionTitleEdit.backgroundColor		= 0xFFFF99;			txtSessionTitleEdit.width				= _header.header_title.width;			txtSessionTitleEdit.height				= _header.header_title.height;			txtSessionTitleEdit.maxChars			= 100;			txtSessionTitleEdit.textColor			= 0;			_header.header_title.visible = false;			_header.addChild(txtSessionTitleEdit);			_stage.addEventListener(KeyboardEvent.KEY_DOWN,submit_header_name_key);			_stage.addEventListener(MouseEvent.MOUSE_DOWN,submit_header_name_mouse);		}				private function submit_header_name_key(event:KeyboardEvent){		   // if the key is ENTER		   if(event.charCode == 13 && event.target == txtSessionTitleEdit){							submit_header_name_do();		   }		}				private function submit_header_name_mouse(event:MouseEvent){			//tab_edit.mouseChildren = false;						if(event.target != txtSessionTitleEdit) {				submit_header_name_do();			}		}					private function submit_header_name_do() {						_stage.removeEventListener(KeyboardEvent.KEY_DOWN,submit_header_name_key);			_stage.removeEventListener(MouseEvent.MOUSE_DOWN,submit_header_name_mouse);			if (!txtSessionTitleEdit) return;						var strNewTitle:String = txtSessionTitleEdit.htmlText;			var tFormat:TextFormat = _header.header_title.getTextFormat();			_header.header_title.htmlText = strNewTitle;			_header.header_title.setTextFormat(tFormat);			_header.header_title.visible = true;			_header.removeChild(txtSessionTitleEdit);			txtSessionTitleEdit = null;			sG.textEditing = false;			// Write value back to XML file.			sG.sessionDataXML.session[0]._sessionTitle = _header.header_title.text;			//_ref.settingsForm.form.refreshSettings();		}				public function setHeaderSessionTitle(sessionTitle:String) {			var tFormat:TextFormat = _header.header_title.defaultTextFormat;			_header.header_title.htmlText = sessionTitle;			_header.header_title.setTextFormat(tFormat);			// Write value back to XML file.			sG.sessionDataXML.session._sessionTitle = _header.header_title.text;		}				private function getFormat():TextFormat		{			var format:TextFormat=new TextFormat();			//format.font=FONT;			format.font= "_sans"; 			format.size=14;			format.color="0xFFFFFF";			return format;		}				public function show_pad(event:MouseEvent):void {			var padBtn:MovieClip = event.currentTarget.parent;			togglePad(padBtn);		}				public function togglePad(btn:MovieClip = null):void {			var padBtn:MovieClip;			if (btn) padBtn = btn; // Viewer can specify a toolbar button.						//remove tooltip			SSPToolTip.getInstance().removeToolTip();						//if the scribble pad is inactive, make active and remove button event listeners			if(!drawing) {				_ref.popupToolbar.toolbarEnabled = false;				drawing = true;				_header.scribble_btn.csrbutton.removeEventListener(MouseEvent.MOUSE_OUT,button_out);				_header.scribble_btn.csrbutton.removeEventListener(MouseEvent.MOUSE_OVER,button_hover);				_header.scribble_btn.gotoAndStop(2);				if (padBtn) padBtn.gotoAndStop(2);				_ref._pad.initPad();				//if it is active, hide scribble pad and add button event listeners			} else {				drawing = false;				_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OUT,button_out);				_header.scribble_btn.csrbutton.addEventListener(MouseEvent.MOUSE_OVER,button_hover);				_header.scribble_btn.gotoAndStop(1);				if (padBtn) padBtn.gotoAndStop(1);				_ref._pad.clearDrawing();				_ref.popupToolbar.toolbarEnabled = true;			}		}	}}